name: CI

on:
  pull_request:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'


      - name: Install Apptainer
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends apptainer \
            || sudo apt-get install -y --no-install-recommends singularity-container
          if ! command -v apptainer >/dev/null && command -v singularity >/dev/null; then
            sudo ln -s $(command -v singularity) /usr/local/bin/apptainer
          fi
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /usr/share/doc /usr/share/man /usr/share/locale

      - name: Free disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"/CodeQL
          df -h

      - name: Restore Apptainer cache
        id: cache-dir
        uses: actions/cache@v3
        with:
          path: sifs/.cache
          key: ${{ runner.os }}-apptainer-cache-${{ hashFiles('sifs/get_image.sh') }}

      - name: Restore SIF from cache
        id: cache-sif
        uses: actions/cache@v3
        with:
          path: sifs/ompc-base_latest.sif
          key: ${{ runner.os }}-sif-${{ hashFiles('sifs/get_image.sh') }}

      - name: Download SIF image
        if: steps.cache-sif.outputs.cache-hit != 'true'
        env:
          APPTAINER_CACHEDIR: ${{ github.workspace }}/sifs/.cache
          SINGULARITY_CACHEDIR: ${{ github.workspace }}/sifs/.cache
          APPTAINER_TMPDIR: ${{ github.workspace }}/sifs/.cache/tmp
        run: |
          cd sifs
          bash get_image.sh

      - name: Validate Python scripts
        run: |
          python -m py_compile $(git ls-files '*.py')

      - name: Build demo and check output
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake liburing-dev
          cd application/uring_print_mt
          mkdir build && cd build
          cmake ..
          cmake --build . -- VERBOSE=1
          ./demo 2>actual_output.txt
          sort -V actual_output.txt >sorted_actual.txt
          diff -u ../example_output.txt sorted_actual.txt
